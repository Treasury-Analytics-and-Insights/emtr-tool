[{"name":"server.R","content":"#\r\n# This is the server logic of the Income Explorer Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n\r\nsuppressMessages({\r\n  library(shiny)\r\n  library(openxlsx)\r\n  library(rhandsontable)\r\n  library(magrittr)\r\n  library(data.table)\r\n})\r\n\r\n# Define server logic required to run the app\r\nshinyServer(function(input, output, session) {\r\n  ##########################################\r\n  # Pop up warning on start \r\n  ##########################################\r\n  # the modal dialog where the user can enter the query details.\r\n  warning_modal <- modalDialog(\r\n    title = \"Warning\", \r\n    paste0(\r\n      \"This software is provided as-is, for research purposes only, \",\r\n      \"with absolutely no warranty or guarantee of correctness.\"\r\n    ),\r\n    easyClose = FALSE, fade = FALSE\r\n  )\r\n  \r\n  # Show the model on start up ...\r\n  showModal(warning_modal)\r\n  \r\n  ##########################################\r\n  # Loading data and calculating incomes \r\n  ##########################################\r\n  \r\n  WEEKS_IN_YEAR <- 52L\r\n  \r\n  # Read in the parameters from files\r\n  reload_data <- reactive({\r\n    if(!is.null(input$show_parameters)){\r\n      DF <- hot_to_r(input$show_parameters)\r\n      parameters_SQ <- parameters_from_df(DF, parameters_column = 2)\r\n    } else {\r\n      parameters_SQ <- get_parameters()\r\n    }\r\n    \r\n    return(list(\r\n      parameters_SQ = parameters_SQ\r\n    ))\r\n  })\r\n  \r\n  \r\n  # calculate incomes \r\n  calculate_income <- reactive({\r\n    parameters = req(reload_data()) # req\r\n    \r\n    # convert inputs\r\n    MAX_WAGE <- 50*input$wage1_hourly \r\n    children <- convert_ages(input$Children_ages)\r\n    \r\n    if (input$Acc_type == \"Renting\"){\r\n      AS_Accommodation_Rent <- TRUE\r\n    } else {\r\n      AS_Accommodation_Rent <- FALSE\r\n    }\r\n    \r\n    \r\n    if (input$Partnered == 1){\r\n      if (!is.na(input$hours2)) {\r\n        partner_hours <- input$hours2\r\n      } else {\r\n        partner_hours <- 0\r\n      }\r\n      \r\n      if (!is.na(input$gross_wage2)) {\r\n        partner_wages <- input$gross_wage2*input$hours2\r\n      } else {\r\n        partner_wages <- 0\r\n      }\r\n    } else {\r\n      partner_wages <- 0\r\n      partner_hours <- 0\r\n    }\r\n    \r\n    # Create helper emtr function using current inputs\r\n    hot_emtr <- function(params) {\r\n      emtr_df <- emtr(\r\n        # System parameters\r\n        params,\r\n        # Family parameters\r\n        input$Partnered, input$wage1_hourly, children, partner_wages, partner_hours,\r\n        input$AS_Accommodation_Costs, AS_Accommodation_Rent, as.numeric(input$AS_Area),\r\n        # Presentation parameters\r\n        max_wage = MAX_WAGE, steps_per_dollar = 1L, weeks_in_year = WEEKS_IN_YEAR, \r\n        MFTC_WEP_scaling = as.numeric(input$MFTC_WEP_scaling)\r\n      )\r\n      return(emtr_df)\r\n    }\r\n    \r\n    X_SQ <- hot_emtr(parameters$parameters_SQ)\r\n    \r\n    # MFTC is meant to make families always better off being off-benefit than staying\r\n    # on a benefit. We let the user set whether the family stays on benefit\r\n    # or gets IWTC when they work, with the parameter input$WFFBEN_SQ. This can be:\r\n    # \"Max\" - choose the option which maximises the family income.\r\n    # \"WFF\" - go off the benefit while working, and get IWTC + MFTC.\r\n    # \"Benefit\" - stay on the benefit while working, and never get IWTC or MFTC\r\n    #             (benefit abates away as earned income increases).\r\n    # Note that these are only applicable when beneficiaries are ineligible for IWTC;\r\n    # MFTC eligibility currently depends on IWTC eligibility in the `emtr` function.\r\n    \r\n    if (input$WFFBEN_SQ != \"WFF\") {\r\n      SQ_params_with_no_IWTC <- remove_IWTC_from_params(parameters$parameters_SQ)\r\n      X_SQ_without_IWTC <- hot_emtr(SQ_params_with_no_IWTC)\r\n\r\n      if (input$WFFBEN_SQ == \"Max\") {\r\n        # Choose which of benefit or IWTC gives max net income\r\n        X_SQ <- choose_IWTC_or_benefit(X_SQ, X_SQ_without_IWTC)\r\n\r\n      } else if (input$WFFBEN_SQ == \"Benefit\") {\r\n        X_SQ <- X_SQ_without_IWTC\r\n      }\r\n    }\r\n    \r\n    # used to ensure that SQ and reform plots have the same axes\r\n    max_income <- max(X_SQ$gross_wage1_annual)\r\n    \r\n    max_net_income <- 1.1*WEEKS_IN_YEAR*max(\r\n      max(X_SQ$Net_Income)\r\n    )\r\n    min_y_SQ <- X_SQ[, WEEKS_IN_YEAR*min(\r\n      -(\r\n        gross_benefit1 + gross_benefit2 - net_benefit1 - net_benefit2 +\r\n          wage1_tax + wage2_tax + wage1_ACC_levy + wage2_ACC_levy\r\n      )\r\n    )]\r\n\r\n    min_y <- 1.1*min(min_y_SQ) \r\n    \r\n    return(list(\r\n      X_SQ = X_SQ,\r\n      max_income = max_income,\r\n      max_net_income = max_net_income, \r\n      min_y = min_y\r\n    ))\r\n  })\r\n  \r\n  ########################################## \r\n  ### EMTR Tab\r\n  ########################################## \r\n  \r\n  output$plot_budgetconstraint_SQ<- renderPlotly({\r\n    compElements = c(\"Best Start\", \"Winter Energy\", \"Accomodation Supplement\", \"IWTC\", \"FTC\",\r\n                     \"MFTC\", \"IETC\", \"Net Core Benefit\", \"Net Wage\", \"Tax on Core Benefit\", \"Tax on Wage and ACC\")\r\n    X_results <- req(calculate_income())\r\n    X_SQ <- X_results$X_SQ\r\n    amounts_net_plot(\r\n      X_SQ,\r\n      inc_limit = X_results$max_income,\r\n      y_min = X_results$min_y,\r\n      y_max = X_results$max_net_income,\r\n      display_cols = FALSE)\r\n  })\r\n  \r\n  output$plot_incomecomposition_SQ<- renderPlotly({\r\n    compElements = c(\"Best Start\", \"Winter Energy\", \"Accomodation Supplement\", \"IWTC\", \"FTC\",\r\n                     \"MFTC\", \"IETC\", \"Net Core Benefit\", \"Net Wage\", \"Tax on Core Benefit\", \"Tax on Wage and ACC\")\r\n    X_results <- req(calculate_income())\r\n    X_SQ <- X_results$X_SQ\r\n    amounts_net_plot(\r\n      X_SQ,\r\n      inc_limit = X_results$max_income,\r\n      y_min = X_results$min_y,\r\n      y_max = X_results$max_net_income,\r\n      display_cols = TRUE)\r\n  })\r\n  \r\n  # emtr plots\r\n  output$plot_emtr<- renderPlotly({\r\n    reload_data()\r\n    X_results <- req(calculate_income())\r\n    \r\n    X_SQ <- X_results$X_SQ\r\n    \r\n    compare_plots(X_SQ, type = \"EMTR\", min_rate = 0, max_rate = 1.1,\r\n      inc_limit = X_results$max_income, title = \"EMTR comparison\",\r\n      policy_name1 = 'Status Quo', policy_name2 = 'Reform',\r\n      watermark = FALSE, weeks_in_year = WEEKS_IN_YEAR\r\n    )\r\n  })\r\n  \r\n  ########################################## \r\n  ### Outputs\r\n  ##########################################\r\n  \r\n  # NOTE: Download not available in shinylive\r\n  \r\n  # Download everything \r\n  output$downloadData <- downloadHandler(\r\n    filename = function() {\r\n      \"IncomeExplorerResults.xlsx\"\r\n    },\r\n    content = function(file) {\r\n      X_results <- calculate_income()\r\n      parameters = reload_data()\r\n      \r\n      wb <- createWorkbook()\r\n      \r\n      # Details of the example family and input files\r\n      details <- c(\r\n        SQ_file = input$parameters_SQ$name,\r\n        HourlyWage = input$wage1_hourl,\r\n        Partnered = input$Partnered,\r\n        Partner_HourlyWage = input$gross_wage2*(input$Partnered == 1),\r\n        Partner_HoursWorked = input$hours2*(input$Partnered == 1),\r\n        Accomodation_Costs = input$AS_Accommodation_Costs,\r\n        Accomodation_Type = input$Acc_type,\r\n        AS_Area = input$AS_Area,\r\n        Children_Ages = input$Children_ages\r\n      )\r\n      \r\n      addWorksheet(wb, 'Details')\r\n      writeData(wb, 'Details', names(details), startCol=1)\r\n      writeData(wb, 'Details', details, startCol=2)\r\n      \r\n      # Full sets of results (should probably be more selective)\r\n      addWorksheet(wb, 'SQ')\r\n      writeData(wb, 'SQ', X_results$X_SQ)\r\n      \r\n      saveWorkbook(wb, file, overwrite = TRUE)\r\n    }\r\n  )\r\n})\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of the Income Explorer Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n###############################\r\n# Libraries\r\n###############################\r\n\r\nsuppressMessages({\r\n  library(shiny)\r\n  library(shinythemes)\r\n  library(plotly)\r\n  library(rhandsontable)\r\n  library(data.table)\r\n})\r\n\r\n# Define UI\r\nshinyUI(fluidPage(\r\n  # different themes from shinythemes R package, https://rstudio.github.io/shinythemes/\r\n  theme = shinytheme(\"sandstone\"), # united\r\n  # Application title\r\n  title = \"EMTR Scenario Family Tool\",\r\n  \r\n  navbarPage(\"EMTR Scenario Family Tool\",\r\n  tabPanel(\"EMTR Analysis\",\r\n  \r\n  # Side menu\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      width = 4,\r\n      \r\n      # Input the hourly wage and hours\r\n      fluidRow(\r\n        column(6, numericInput(\r\n          \"wage1_hourly\", \"Hourly wage ($):\",\r\n          min = 18, max = 100,\r\n          #TY24 minimum wage\r\n          value = 22.70, step = .5\r\n        )),\r\n        # Select winter energy payment settings\r\n        column(6, selectInput(\r\n          \"MFTC_WEP_scaling\", \"Winter Energy Payment:\",\r\n          c(\"Average week\" = 1, \"Winter week\" = 12/5, \"Summer week\" = 0),\r\n          selected = \"Average week\"\r\n        ))),\r\n\r\n      # Input accomodation cost settings\r\n      fluidRow(\r\n        column(6, numericInput(\r\n          \"AS_Accommodation_Costs\", \"Weekly Housing Cost ($):\",\r\n          min = 0, max = 1000, value = 450, step = 1 \r\n        )),\r\n        column(4, selectInput(\r\n          \"AS_Area\", label = \"AS Area:\",\r\n          choices = c(1, 2, 3, 4), selected = 2\r\n        )),\r\n        column(4, selectInput(\r\n          \"Acc_type\", label = \"Housing\",\r\n          choices = c(\"Renting\", \"Mortgage\"), selected = \"Renting\"\r\n        ))\r\n      ),\r\n      # Input the children's ages\r\n      textInput(\r\n        \"Children_ages\",\r\n        \"Age of children (e.g. '1, 4' or leave blank)\",\r\n        \"0, 10\"\r\n      ),\r\n      # Input partner status\r\n      checkboxInput(\"Partnered\", \"Partnered\", value = FALSE),\r\n      # Input parter wage details, note that this is only\r\n      # displayed if there is a partner\r\n      fluidRow(\r\n        column(6, conditionalPanel(\r\n          condition = \"input.Partnered == 1\",\r\n          numericInput(\r\n            \"gross_wage2\", \"Partner's hourly wage ($):\",\r\n            min = 15, max = 100, value = 20, step = .5\r\n          )\r\n        )),\r\n        column(6, conditionalPanel(\r\n          condition = \"input.Partnered == 1\",\r\n          numericInput(\r\n            \"hours2\", \"Partner's hours worked:\",\r\n            min = 0, max = 80, value = 0, step = 1\r\n          )\r\n        ))\r\n      ),\r\n      \r\n      # Input to allow the user to choose situations of people\r\n      # stay on benefit, or on WFF or showing the maximum amount\r\n      # between the two options\r\n      checkboxInput(\"Advanced\", \"Advanced\", value = FALSE),\r\n      fluidRow(\r\n        column(6, conditionalPanel(\r\n          condition = \"input.Advanced == 1\",\r\n          selectInput(\r\n            \"WFFBEN_SQ\", \"WFF or Benefit\",\r\n            c(\"Max\", \"WFF\", \"Benefit\"), selected = \"Max\"\r\n          )\r\n        ))),\r\n      \r\n      # Comment out download button when deploying to shinylive\r\n      # downloadButton(\"downloadData\", \"Download Results\")\r\n    ),\r\n    # Main panel containing plots etc.\r\n    mainPanel(\r\n      tabsetPanel(\r\n        tabPanel(\"EMTR\", \r\n                 h2(\"Effective Marginal Tax Rate\"), \r\n                 plotlyOutput(\"plot_emtr\", height = \"300px\")),\r\n        tabPanel(\"Income Composition\",\r\n                 h2(\"Income Composition\"), \r\n                 plotlyOutput(\"plot_incomecomposition_SQ\", height = \"400px\")),\r\n        tabPanel(\"Budget Constraint\",\r\n                 h2(\"Budget Constraint\"), \r\n                 plotlyOutput(\"plot_budgetconstraint_SQ\", height = \"400px\"))\r\n      ),\r\n          \r\n      h2(\" \") # Add padding to bottom of page\r\n    )\r\n  )\r\n  ),\r\n  tabPanel(\"About\", \r\n           mainPanel(h2(\"About the Tool\"),\r\n                     p(\"This tool is designed to make support policy analysts in understanding the EMTR profiles faced by a range of different scenario families in order to help inform the design of Tax and Welfare policy. \"),\r\n                     h2(\"Analytics & Insights - The Treasury\"),\r\n                     p(\"The EMTR Scenario Family tool was developed by the Analytics & Insights team in the New Zealand Treasury's Office of the Chief Economic Adviser.\")\r\n  ))\r\n)))\r\n","type":"text"},{"name":"R/app_utilities.R","content":"# Converts a string used to input children's ages into numeric values\r\nconvert_ages <- function(input_string){\r\n  ages = as.numeric(strsplit(input_string, \",\")[[1]])\r\n  ages = sort(ages)\r\n  return(ages)\r\n}\r\n\r\n# Plot budget contraints/income composition\r\n#new plotting functions based off plotly R package\r\namounts_net_plot <- \r\n  function(EMTR_table, inc_limit=NULL, y_min=NULL, y_max=NULL,\r\n           watermark=FALSE, weeks_in_year=52L,\r\n           display_cols = TRUE) {\r\n    \r\n    if (display_cols == TRUE) {\r\n      display_cols = c(\"Net Income\", \"Best Start\", \"Winter Energy\", \"Accomodation Supplement\", \r\n                       \"IWTC\", \"FTC\", \"MFTC\", \"IETC\", \"Net Core Benefit\", \"Net Wage\", \r\n                       \"Net Wage (Partner)\", \"Tax on Core Benefit\", \"Tax on Wage and ACC\")\r\n    } else {\r\n      display_cols = c(\"Net Income\")\r\n    }\r\n    \r\n    # tsy_palette <- RColorBrewer::brewer.pal(n = 12, name = \"Paired\")\r\n    tsy_palette <- c( \r\n      rgb(0, 131, 172, maxColorValue = 255),\r\n      rgb(0, 188, 226, maxColorValue = 255),\r\n      rgb(103, 168, 84, maxColorValue = 255),\r\n      rgb(188, 214, 81, maxColorValue = 255),\r\n      rgb(241, 164, 45, maxColorValue = 255),\r\n      rgb(239, 150, 108, maxColorValue = 255),\r\n      rgb(0, 79, 103, maxColorValue = 255),\r\n      rgb(0, 113, 136, maxColorValue = 255),\r\n      rgb(62, 101, 50, maxColorValue = 255),\r\n      rgb(122, 143, 34, maxColorValue = 255),\r\n      rgb(13, 143, 34, maxColorValue = 255),\r\n      rgb(122, 42, 34, maxColorValue = 255)\r\n    )\r\n    tsy_palette <- colorRampPalette(tsy_palette)(20)\r\n    \r\n    set_tsy_palette <- c(\"Best Start\" = tsy_palette[1], \r\n                     \"Winter Energy\" = tsy_palette[2], \r\n                     \"Accomodation Supplement\" = tsy_palette[3], \r\n                     \"IWTC\" = tsy_palette[4], \r\n                     \"FTC\" = tsy_palette[5], \r\n                     \"MFTC\" = tsy_palette[6], \r\n                     \"IETC\" = tsy_palette[7], \r\n                     \r\n                     \"Net Core Benefit\" = tsy_palette[9], \r\n                     \"Net Wage\" = tsy_palette[10], \r\n                     \"Net Wage (Partner)\" = tsy_palette[12], \r\n                     \"Tax on Core Benefit\" = tsy_palette[12], \r\n                     \"Tax on Wage and ACC\" = tsy_palette[11])\r\n    \r\n    X <- copy(EMTR_table)\r\n    \r\n    two_adults <- (X[, max(net_benefit2)]>0) # Do we need this? \r\n    \r\n    wage1_hourly <- X[2, gross_wage1/hours1] # Do we need this? \r\n    \r\n    if (is.null(inc_limit))\r\n      inc_limit <- X[,max(gross_wage1_annual)]\r\n    \r\n    Y <- EMTR_table[,.(gross_wage1_annual,\r\n                       gross_benefit1,\r\n                       gross_benefit2,\r\n                       net_benefit = net_benefit1 + net_benefit2,\r\n                       net_wage1,\r\n                       net_wage2,\r\n                       benefit_tax=-(gross_benefit1+gross_benefit2-net_benefit1-net_benefit2),\r\n                       gross_wage=gross_wage1+gross_wage2,\r\n                       wage_tax_and_ACC=-(wage1_tax+wage2_tax+wage1_ACC_levy+wage2_ACC_levy),\r\n                       IETC_abated=IETC_abated1+IETC_abated2,\r\n                       \r\n                       FTC_abated,MFTC,\r\n                       IWTC_abated,\r\n                       AS_Amount,\r\n                       WinterEnergy,\r\n                       BestStart_Total, \r\n                       Net_Income)]\r\n    \r\n    Y[, ':=' (gross_benefit1 = NULL,\r\n              gross_benefit2 = NULL )]\r\n    \r\n    Y <- Y[, lapply(.SD, function(x) x*weeks_in_year), by = .(gross_wage1_annual)]\r\n    \r\n    p <- \r\n      plot_ly(Y) %>%\r\n      add_trace(x=~hours1, y=~0, line=list(width = 0), xaxis=\"x2\", \r\n                data=X, showlegend=FALSE, inherit=FALSE, \r\n                hoverinfo = \"none\", type = \"scatter\", mode = \"lines\") %>%\r\n      layout(xaxis2 = list(overlaying = \"x\", nticks = 10, side = \"top\",\r\n                           title = \"Hours/week\", automargin=TRUE, size=8,\r\n                           showline = TRUE),\r\n             xaxis = list(title = \"Annual gross wage income ($)\", \r\n                          tickformat = \"$\", \r\n                          automargin=TRUE,\r\n                          zeroline = TRUE,\r\n                          showline = TRUE,\r\n                          mirror=TRUE),\r\n             yaxis = list (title = \"Income ($)\", tickformat = \"$\", \r\n                           automargin=TRUE,\r\n                           zeroline = TRUE,\r\n                           showline = TRUE,\r\n                           mirror=TRUE\r\n                           # range = c(0, max(1, data1_for_plot$value) + 0.03)\r\n                           ), # TEST THIS\r\n             legend = list(x = 100, y = 0.5),\r\n             hovermode = \"compare\") \r\n    \r\n    if(\"Tax on Wage and ACC\" %in% display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~wage_tax_and_ACC, name = 'Tax on Wage and ACC', \r\n                           fillcolor = set_tsy_palette[13], stackgroup = 'one',\r\n                           hovertemplate = paste(\"Tax on Wage and ACC: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Tax on Core Benefit\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none', \r\n                           y = ~benefit_tax, name = \"Tax on Core Benefit\", \r\n                           fillcolor = set_tsy_palette[12], stackgroup = 'one',\r\n                           hovertemplate = paste(\"Tax on Core Benefit: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Net Wage (Partner)\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~net_wage2, name = 'Net Wage (Partner)', stackgroup = 'two', \r\n                           fillcolor = set_tsy_palette[11],\r\n                           hovertemplate = paste(\"Net Wage (Partner): %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Net Wage\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~net_wage1, name = 'Net Wage', stackgroup = 'two',\r\n                           fillcolor = set_tsy_palette[10],\r\n                           hovertemplate = paste(\r\n                             \"Annual gross wage income:\\n %{x:$,.2f} \\n\",\r\n                             \"Net Wage: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Net Core Benefit\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~net_benefit, name = 'Net Core Benefit',\r\n                           fillcolor = set_tsy_palette[9], stackgroup = 'two',\r\n                           hovertemplate = paste(\"Net Core Benefit: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    \r\n    \r\n    if(\"IETC\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~IETC_abated, name = 'IETC',\r\n                           fillcolor = set_tsy_palette[7], stackgroup = 'two',\r\n                           hovertemplate = paste(\"IETC: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"MFTC\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~MFTC, name = 'MFTC', \r\n                           fillcolor = set_tsy_palette[6], stackgroup = 'two',\r\n                           hovertemplate = paste(\"MFTC: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"FTC\" %in% display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~FTC_abated, name = 'FTC',\r\n                           fillcolor = set_tsy_palette[5], stackgroup = 'two',\r\n                           hovertemplate = paste(\"FTC: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"IWTC\" %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~IWTC_abated, name = 'IWTC',\r\n                           fillcolor = set_tsy_palette[4], stackgroup = 'two',\r\n                           hovertemplate = paste(\"IWTC: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Accomodation Supplement\" %in%  display_cols)\r\n      p <- p %>%   add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                             y = ~AS_Amount,\r\n                             name = 'Accomodation Supplement',\r\n                             fillcolor = set_tsy_palette[3], stackgroup = 'two',\r\n                             hovertemplate = paste(\"Accomodation Supplement: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Winter Energy\"  %in%  display_cols )\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~WinterEnergy, name = 'Winter Energy',\r\n                           fillcolor = set_tsy_palette[2], stackgroup = 'two',\r\n                           hovertemplate = paste(\"Winter Energy: %{y:$,.0f}<extra><\/extra>\"))  \r\n    \r\n    if(\"Best Start\"  %in%  display_cols)\r\n      p <- p %>% add_trace(data = Y, x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n                           y = ~BestStart_Total, \r\n                           name = 'Best Start', fillcolor = set_tsy_palette[1], \r\n                           stackgroup = 'two',\r\n                           hovertemplate = paste(\"Best Start: %{y:$,.0f}<extra><\/extra>\"))   \r\n    \r\n    \r\n    #Adding a line for Net Income\r\n    if(\"Net Income\"  %in%  display_cols)\r\n      p <- \r\n      p %>% add_lines(data = Y, x = ~gross_wage1_annual, \r\n                      y = ~Net_Income, name = 'Net Income', color = I(\"black\"),\r\n                      hovertemplate = paste(\"Net Income: %{y:$,.0f}<extra><\/extra>\")) \r\n    \r\n    return(p)\r\n    \r\n  }\r\n\r\n# Plot two Effective Marginal Tax Rates/ Replacement Rates / Participation Tax Rates\r\ncompare_plots <- function(data1,  \r\n                          type = c( \"EMTR\", \"RR\", \"PTR\"),\r\n                          min_rate=0, max_rate=1.1,\r\n                          inc_limit=NULL, title=NULL,\r\n                          policy_name1 = 'Status Quo',\r\n                          policy_name2 = 'Policy 1',\r\n                          watermark=FALSE,\r\n                          weeks_in_year=52L\r\n) {\r\n  \r\n  type <- match.arg(type)  \r\n  \r\n  data1_for_plot <- copy(data1)\r\n  \r\n  if(type == \"EMTR\"){\r\n    setnames(data1_for_plot, \"EMTR\", \"value1\")\r\n    y_axis_title <- \"Effective Marginal Tax Rate\"\r\n  }\r\n  \r\n  \r\n  data1_for_plot[, value1 := pmax(pmin(value1, max_rate), min_rate)]\r\n  data1_for_plot <- \r\n    data1_for_plot[, .(gross_wage1, gross_wage1_annual, value1)]\r\n  \r\n  data1_for_plot %<>% melt(id.vars=c('gross_wage1','gross_wage1_annual'),\r\n                           variable.name='Scenario')\r\n  \r\n  data1_for_plot[Scenario==\"value1\", Scenario:=policy_name1]\r\n  \r\n  data1_for_plot %>% dcast(gross_wage1 + gross_wage1_annual ~ Scenario) %>%\r\n    plot_ly(x = ~gross_wage1_annual, y = ~`Status Quo`, name = policy_name1, \r\n            mode = \"lines\", type = 'scatter',\r\n            line = list(color = \"#56B4E9\", width = 3),\r\n            hovertemplate =  paste0(\r\n              \"Annual gross wage income:\\n %{x:$,.2f}\\n \",\r\n              policy_name1, \": %{y:.2%} <extra><\/extra>\")) %>% \r\n    add_trace(x=~hours1, y=~0, line=list(width = 0), xaxis=\"x2\", \r\n              data=data1, showlegend=FALSE, inherit=FALSE,\r\n              hoverinfo=\"none\", type = \"scatter\", mode = \"lines\") %>%\r\n    layout(xaxis2 = list(overlaying = \"x\", nticks = 10, side = \"top\",\r\n                         title = \"Hours/week\", automargin=TRUE, size=8,\r\n                         showline = TRUE),\r\n           xaxis = list(title = \"Annual gross wage income ($)\", \r\n                        tickformat =  \"$,\",\r\n                        automargin=TRUE,\r\n                        showline = TRUE,\r\n                        mirror=TRUE,\r\n                        margin = list(b = 0)),\r\n           yaxis = list (title = y_axis_title,\r\n                         # texttemplate='%{y:.2%}',\r\n                         tickformat = \".0%\",\r\n                         automargin=TRUE,\r\n                         showline = TRUE,\r\n                         mirror=TRUE,\r\n                         range = c(0, max(1, data1_for_plot$value) + 0.03)\r\n                         ),\r\n           legend = list(x = 100, y = 0.5),\r\n           hovermode = \"compare\") \r\n}\r\n\r\nremove_IWTC_from_params <- function(input_params) {\r\n  output_params <- copy(input_params)\r\n  output_params$FamilyAssistance_IWTC_Rates_UpTo3Children <- 0\r\n  output_params$FamilyAssistance_IWTC_Rates_SubsequentChildren <- 0\r\n  return(output_params)\r\n}\r\n\r\nchoose_IWTC_or_benefit <- function(X, X_without_IWTC) {\r\n  # Merge max\r\n  SQ_net_income_comparison <- cbind(\r\n    X[, .(With_IWTC = Net_Income)],\r\n    X_without_IWTC[, .(Without_IWTC = Net_Income)]\r\n  )\r\n  SQ_net_income_comparison[, row_ID := 1:.N]\r\n  With_IWTC_indices <- SQ_net_income_comparison[With_IWTC >= Without_IWTC, row_ID]\r\n  Without_IWTC_indices <- SQ_net_income_comparison[Without_IWTC > With_IWTC, row_ID]\r\n  \r\n  With_IWTC <- X[With_IWTC_indices]\r\n  Without_IWTC <- X_without_IWTC[Without_IWTC_indices]\r\n  \r\n  X <- rbind(With_IWTC, Without_IWTC)\r\n  setorderv(X, \"hours1\")\r\n  \r\n  X[, EMTR := 1 - 1L*(shift(Net_Income,1L,type=\"lead\")-Net_Income)]\r\n  X[, EMTR := zoo::na.locf(EMTR)]\r\n  \r\n  return(X)\r\n}\r\n\r\nplot_income_decomposition <- function(comebined_data, scenario_name, set_tsy_palette) {\r\n  plot_ly(comebined_data[Scenario == scenario_name &\r\n                           hours1 <= 50,]) %>%\r\n    add_trace(x=~hours1, y=~0, line=list(width = 0), xaxis=\"x2\",\r\n              showlegend=FALSE, inherit=FALSE, \r\n              hoverinfo = \"none\", type = \"scatter\", mode = \"lines\") %>%\r\n    layout(xaxis2 = list(overlaying = \"x\", nticks = 10, side = \"top\",\r\n                         title = \"Hours/week\", automargin=TRUE, size=8,\r\n                         showline = TRUE),\r\n           xaxis = list(title = \"Annual gross wage income ($)\", \r\n                        tickformat = \"$\", \r\n                        automargin=TRUE,\r\n                        zeroline = TRUE,\r\n                        showline = TRUE,\r\n                        mirror=TRUE),\r\n           yaxis = list (title = \"Income ($)\", tickformat = \"$\", \r\n                         automargin=TRUE,\r\n                         zeroline = TRUE,\r\n                         showline = TRUE,\r\n                         mirror=TRUE),\r\n           legend = list(x = 100, y = 0.5),\r\n           hovermode = \"compare\")  %>% \r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~wage_tax_and_ACC, name = 'Tax on Wage and ACC', \r\n              fillcolor = set_tsy_palette[13], stackgroup = 'one',\r\n              hovertemplate = paste(\"Tax on Wage and ACC: %{y:$,.0f}<extra><\/extra>\"))  %>%\r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none', \r\n              y = ~benefit_tax, name = \"Tax on Core Benefit\", \r\n              fillcolor = set_tsy_palette[12], stackgroup = 'one',\r\n              hovertemplate = paste(\"Tax on Core Benefit: %{y:$,.0f}<extra><\/extra>\"))  %>%\r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~net_wage2, name = 'Net Wage (Partner)', stackgroup = 'two', \r\n              fillcolor = set_tsy_palette[11],\r\n              hovertemplate = paste(\"Net Wage (Partner): %{y:$,.0f}<extra><\/extra>\")) %>% \r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~net_wage1, name = 'Net Wage', stackgroup = 'two',\r\n              fillcolor = set_tsy_palette[10],\r\n              hovertemplate = paste(\"Net Wage: %{y:$,.0f}<extra><\/extra>\")) %>% \r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~net_benefit, name = 'Net Core Benefit',\r\n              fillcolor = set_tsy_palette[9], stackgroup = 'two',\r\n              hovertemplate = paste(\"Net Core Benefit: %{y:$,.0f}<extra><\/extra>\"))  %>% \r\n    \r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~IETC_abated, name = 'IETC',\r\n              fillcolor = set_tsy_palette[7], stackgroup = 'two',\r\n              hovertemplate = paste(\"IETC: %{y:$,.0f}<extra><\/extra>\")) %>% \r\n    add_trace(x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n              y = ~MFTC, name = 'MFTC', \r\n              fillcolor = set_tsy_palette[6], stackgroup = 'two',\r\n              hovertemplate = paste(\"MFTC: %{y:$,.0f}<extra><\/extra>\"))  %>%\r\n    add_trace( x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n               y = ~FTC_abated, name = 'FTC',\r\n               fillcolor = set_tsy_palette[5], stackgroup = 'two',\r\n               hovertemplate = paste(\"FTC: %{y:$,.0f}<extra><\/extra>\"))  %>%\r\n    add_trace( x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n               y = ~IWTC_abated, name = 'IWTC',\r\n               fillcolor = set_tsy_palette[4], stackgroup = 'two',\r\n               hovertemplate = paste(\"IWTC: %{y:$,.0f}<extra><\/extra>\")) %>% \r\n    add_trace( x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n               y = ~AS_Amount,\r\n               name = 'Accommodation Supplement',\r\n               fillcolor = set_tsy_palette[3], stackgroup = 'two',\r\n               hovertemplate = paste(\"Accommodation Supplement: %{y:$,.0f}<extra><\/extra>\")) %>%\r\n    add_trace( x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n               y = ~WinterEnergy, name = 'Winter Energy',\r\n               fillcolor = set_tsy_palette[2], stackgroup = 'two',\r\n               hovertemplate = paste(\"Winter Energy: %{y:$,.0f}<extra><\/extra>\")) %>%\r\n    add_trace( x = ~gross_wage1_annual, type = 'scatter', mode = 'none',\r\n               y = ~BestStart_Total, \r\n               name = 'Best Start', fillcolor = set_tsy_palette[1], \r\n               stackgroup = 'two',\r\n               hovertemplate = paste(\"Best Start: %{y:$,.0f}<extra><\/extra>\")) \r\n}\r\n\r\n","type":"text"},{"name":"R/emtr.R","content":"parameters_from_file <- function(parameters_file) {\r\n  # source(\"C:\\\\LiamB\\\\EMTR Tool\\\\IncomeExplorer-master\\\\IncomeExplorer-master\\\\R\\\\hard_load.R\")\r\n  # return(get_parameters())\r\n  parameters = get_parameters()\r\n  # parameters_df <- openxlsx::read.xlsx(parameters_file)\r\n  # parameters <- parameters_from_df(parameters_df)\r\n  return(parameters)\r\n}\r\n\r\n\r\nparameters_from_df <- function(parameters_df, parameters_column = 2) {\r\n  \r\n  Params_text <- parameters_df[complete.cases(parameters_df), c(1, parameters_column)]\r\n  \r\n  # Replace the names\r\n  Params_text$Parameter <- gsub(\"\\\\+\", \"_\", gsub(\"/\", \"_\", Params_text$Parameter))\r\n  \r\n  # Clean up the parameters\r\n  Params_text[, 2] <- gsub(\"\\\\\\\\\", \"/\", Params_text[, 2])\r\n  Params_text[, 2] <- gsub(\"\\\\[\\\\[\", \"rbind(c(\", Params_text[, 2])\r\n  Params_text[, 2] <- gsub(\"\\\\[\", \"c(\", Params_text[, 2])\r\n  Params_text[, 2] <- gsub(\"]\", \")\", Params_text[, 2])\r\n  Params_text[, 2] <- gsub(\";\", \",\", Params_text[, 2])\r\n  Params_text[, 2] <- gsub(\"'\", \"\", Params_text[, 2])\r\n  \r\n  Parameters <- vector(mode=\"list\", length=dim(Params_text)[1])\r\n  names(Parameters) <- Params_text$Parameter\r\n  \r\n  for (i in 1:nrow(Params_text)){\r\n    if (!is.na(suppressWarnings(as.numeric(Params_text[i,2])))){\r\n      Parameters[[Params_text[i,1]]] <- suppressWarnings(as.numeric(Params_text[i,2]))\r\n    } else if (grepl(\"rbind\", Params_text[i,2])) {\r\n      Parameters[[Params_text[i,1]]] <- eval(parse(text = Params_text[i,2]))\r\n    } else {\r\n      Parameters[[Params_text[i,1]]] <- Params_text[i,2]\r\n    }\r\n  }\r\n  \r\n  return(Parameters)\r\n}\r\n\r\n\r\n\r\nwks_in_year <- function(year) {\r\n  is_leap_year <- (!(year %% 4) & (year %% 100)) | !(year %% 400)\r\n  if (is_leap_year) {\r\n    weeks <- 366/7\r\n  } else {\r\n    weeks <- 365/7\r\n  }\r\n  return(weeks)\r\n}\r\n\r\nemtr <- function(\r\n  # System parameters\r\n  Parameters,\r\n  # Family parameters\r\n  Partnered = FALSE,\r\n  wage1_hourly = 16.50,\r\n  Children_ages = c(),\r\n  gross_wage2 = 0,\r\n  hours2 = 0,\r\n  AS_Accommodation_Costs = 0,\r\n  AS_Accommodation_Rent = TRUE,\r\n  AS_Area = 1L,\r\n  # Presentation parameters\r\n  max_wage = 1900,\r\n  steps_per_dollar = 1L,\r\n  weeks_in_year = NULL,\r\n  MFTC_WEP_scaling = NULL,\r\n  pov_thresholds = 0.5,\r\n  bhc_median = 43000,\r\n  ahc_median = 33100) {\r\n  \r\n  # Work out length of the year\r\n  model_year <- Parameters$modelyear\r\n  \r\n  if (is.null(weeks_in_year)){\r\n    weeks_in_year <- wks_in_year(model_year)\r\n  }\r\n  if (is.null(MFTC_WEP_scaling)) {\r\n    MFTC_WEP_scaling <- 1/weeks_in_year\r\n  } else {\r\n    MFTC_WEP_scaling <- MFTC_WEP_scaling / weeks_in_year\r\n  }\r\n  \r\n  # Pull AS MaxRates together\r\n  AS_MaxRate_Mortgage <- matrix(data=c(\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area1,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area2,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area3,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area4,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area1,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area2,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area3,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area4,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area1,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area2,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area3,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area4\r\n  ),  nrow=4, ncol=3)\r\n  \r\n  AS_MaxRate_Rent <- matrix(data=c(\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area1,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area2,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area3,\r\n    Parameters$Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area4,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area1,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area2,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area3,\r\n    Parameters$Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area4,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area1,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area2,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area3,\r\n    Parameters$Accommodation_MaxRate_SingleNoDeps_Area4\r\n  ),  nrow=4, ncol=3)\r\n  \r\n  # Count and categorise children\r\n  N_kids <- length(Children_ages)\r\n  BS_abating_kids <- sum(Children_ages==1L) * (model_year >= 2020) +\r\n    sum(Children_ages==2L) * (model_year >= 2021)\r\n  \r\n  BS_nonabating_kids <- sum(Children_ages==0L) * (model_year >= 2019)\r\n\r\n  # Convert tax and abatement schedules to weekly -------------------------------\r\n  # Note that benefit abatement scales in TAWA parameters are weekly values scaled to annual assuming a 52.2 week year\r\n  # Other amounts are annual values, and weekly values are obtained by dividing by the number of weeks in a year,\r\n  # except where the legislation specifies otherwise.\r\n  convert_scale_to_weekly <- function(Scale, wks_in_year = 52L) {\r\n    Scale_Weekly <- Scale\r\n    Scale_Weekly[, 1] <- Scale_Weekly[, 1] / wks_in_year\r\n    return(Scale_Weekly)\r\n  }\r\n  \r\n  Tax_BaseScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$Tax_BaseScale, weeks_in_year)\r\n  Benefits_SPS_AbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$Benefits_SPS_AbatementScale, 52.2)\r\n  Benefits_JSS_AbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$Benefits_JSS_AbatementScale, 52.2)\r\n  Benefits_JSS_CoupleAbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$Benefits_JSS_CoupleAbatementScale, 52.2)\r\n  FamilyAssistance_Abatement_AbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$FamilyAssistance_Abatement_AbatementScale, 365/7)\r\n  IETC_AbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$IETC_AbatementScale, weeks_in_year)\r\n  IWTC_PhaseInScale_Single_Weekly<-\r\n    convert_scale_to_weekly(Parameters$FamilyAssistance_IWTC_PhaseIn_Single, 52.2)\r\n  IWTC_PhaseInScale_Couple_Weekly<-\r\n    convert_scale_to_weekly(Parameters$FamilyAssistance_IWTC_PhaseIn_Couple, 52.2)  \r\n  FamilyAssistance_BestStart_Abatement_AbatementScale_Weekly <-\r\n    convert_scale_to_weekly(Parameters$FamilyAssistance_BestStart_Abatement_AbatementScale, 365/7)\r\n\r\n  \r\n  \r\n  # Convert rates to weekly------------------------------------------------------\r\n  ACC_max_Weekly <- Parameters$ACC_MaxLeviableIncome / weeks_in_year\r\n  FTC_eldest <- Parameters$FamilyAssistance_FTC_Rates_FirstChild / (365/7)\r\n  FTC_subsequent <- Parameters$FamilyAssistance_FTC_Rates_SubsequentChild / (365/7)\r\n  IWTC_first3 <- Parameters$FamilyAssistance_IWTC_Rates_UpTo3Children / 52L\r\n  IWTC_subsequent <- Parameters$FamilyAssistance_IWTC_Rates_SubsequentChildren / 52L\r\n  IETC_rate <- Parameters$IETC_PerYear / weeks_in_year\r\n  IETC_minimum_income <- Parameters$IETC_MinimalIncome / weeks_in_year\r\n  BS_Rate0 <- Parameters$FamilyAssistance_BestStart_Rates_Age0 / (365/7)\r\n  \r\n  BS_Rate1or2 <- Parameters$FamilyAssistance_BestStart_Rates_Age1or2 / (365/7)\r\n  \r\n  WE_Couple_or_Deps_amount <- Parameters$Benefits_WinterEnergy_Rates_CoupleOrDeps*\r\n    MFTC_WEP_scaling\r\n  \r\n  WE_Single_amount <- Parameters$Benefits_WinterEnergy_Rates_Single*\r\n    MFTC_WEP_scaling\r\n  \r\n  MFTC_amount <- Parameters$FamilyAssistance_MFTC_Rates_MinimumIncome / 52L\r\n  \r\n  # Calculate inverse thresholds for the tax system (weekly)\r\n  NIT <- c(0)\r\n  for (Row in 2:nrow(Tax_BaseScale_Weekly)){\r\n    NIT <- c(NIT, tail(NIT, 1) +\r\n               (Tax_BaseScale_Weekly[Row, 1] - Tax_BaseScale_Weekly[Row - 1, 1]) *\r\n               (1 - Tax_BaseScale_Weekly[Row - 1, 2]))\r\n  }\r\n  \r\n  # Assign benefit rates and abatement schedules ------------------------\r\n  if (Partnered == TRUE) {\r\n    # Couple family \r\n    if (N_kids == 0L) {\r\n      # No kids \r\n      Benefit1_Net_0hrs <- Parameters$Benefits_JSS_Rate_Couple\r\n      Benefit2_Net_0hrs <- Parameters$Benefits_JSS_Rate_Couple\r\n      Benefit_Abatement_Scale <- Benefits_JSS_CoupleAbatementScale_Weekly\r\n    } else {\r\n      # At least one kid\r\n      Benefit1_Net_0hrs <- Parameters$Benefits_JSS_Rate_CoupleParent\r\n      Benefit2_Net_0hrs <- Parameters$Benefits_JSS_Rate_CoupleParent\r\n      Benefit_Abatement_Scale <- Benefits_JSS_CoupleAbatementScale_Weekly\r\n    }\r\n    \r\n  } else {\r\n    # Single family \r\n    Benefit2_Net_0hrs <- 0\r\n    if (N_kids == 0) {\r\n      # No kids\r\n      Benefit1_Net_0hrs <- Parameters$Benefits_JSS_Rate_Single\r\n      Benefit_Abatement_Scale <- Benefits_JSS_AbatementScale_Weekly\r\n      \r\n    } else {\r\n      # At least one kid\r\n      if (min(Children_ages) < Parameters$Benefits_Entitlement_Age_SPS_ChildLowerBound) {\r\n        Benefit1_Net_0hrs <- Parameters$Benefits_SPS_Rate\r\n        Benefit_Abatement_Scale <- Benefits_SPS_AbatementScale_Weekly\r\n      } else {\r\n        # Special case for sole parent whose youngest children is older than\r\n        # Benefits_Entitlement_Age_SPS_ChildLowerBound so the rate is based on JSS,\r\n        # But AbatementScale is based on SPS\r\n        Benefit1_Net_0hrs <- Parameters$Benefits_JSS_Rate_SoleParent\r\n        Benefit_Abatement_Scale <- Benefits_SPS_AbatementScale_Weekly # NB!\r\n      }\r\n      \r\n    }\r\n  }\r\n  \r\n  # Assign AS abatement point, entry threshold, and maximum --------------------\r\n  if (N_kids > 0L & !Partnered) {\r\n    AS_Abate_Point <- \r\n      ceiling(weeks_in_year *\r\n                Abatement_Vanishing_Point(Benefits_JSS_AbatementScale_Weekly, \r\n                                          Parameters$Benefits_JSS_Rate_SoleParent))/weeks_in_year\r\n  }else{\r\n    AS_Abate_Point <-\r\n      ceiling(weeks_in_year * \r\n              Abatement_Vanishing_Point(Benefit_Abatement_Scale,\r\n                                        Benefit1_Net_0hrs))/weeks_in_year\r\n  }\r\n  \r\n  AS_entry_threshold <- \r\n    ifelse(AS_Accommodation_Rent,\r\n           Parameters$Accommodation_BaseRateThreshold_Rent,\r\n           Parameters$Accommodation_BaseRateThreshold_Mortgage) *\r\n    ((Benefit1_Net_0hrs + Benefit2_Net_0hrs) + (N_kids > 0L) * FTC_eldest)\r\n  \r\n  \r\n  if (AS_Accommodation_Rent){\r\n    AS_Maximum <-\r\n      AS_MaxRate_Rent[AS_Area, pmax(2L - N_kids - 1L * Partnered, 0L) + 1L]\r\n  } else {\r\n    AS_Maximum <-\r\n      AS_MaxRate_Mortgage[AS_Area, pmax(2L - N_kids - 1L * Partnered, 0L) + 1L]\r\n  }\r\n  \r\n  # Initiate the output table --------------------------------------------------\r\n  X <- data.table(gross_wage1 = seq(0, max_wage, 1 / steps_per_dollar))\r\n  X[, hours1 := gross_wage1 / wage1_hourly]\r\n  X[, gross_wage1_annual := weeks_in_year * gross_wage1]\r\n  \r\n  # Partner wage ---------------------------------------------------------------\r\n  X[, gross_wage2 := gross_wage2]\r\n\r\n  # These are zero by default --------------------------------------------------\r\n  X[, wage2_tax := 0]\r\n  X[, wage2_ACC_levy := 0]\r\n  X[, net_wage2 := 0]\r\n  X[, net_benefit2 := 0]\r\n  X[, gross_benefit2 := 0]\r\n\r\n  X[, IETC_abated1 := 0]\r\n  X[, IETC_abated2 := 0]\r\n\r\n  # Abate benefit --------------------------------------------------------------\r\n  X[, net_benefit1 := \r\n      Abate(TRUE, Benefit1_Net_0hrs, \r\n            Benefit_Abatement_Scale, gross_wage1 + gross_wage2)]\r\n\r\n  \r\n  \r\n  if (Partnered){\r\n    X[, net_benefit2 := Abate(TRUE, Benefit2_Net_0hrs, Benefit_Abatement_Scale,\r\n                              gross_wage1+gross_wage2)]\r\n  }\r\n  \r\n  # Assign IWTC ----------------------------------------------------------------\r\n  # Parameters$FamilyAssistance_IWTC_Eligibility\r\n  #  0 : hours test and do not give to beneficiaries\r\n  #  1 : income test\r\n  #  2 : phase in \r\n  if (Parameters$FamilyAssistance_IWTC_Eligibility == 1){\r\n    # Use income test \r\n    \r\n    # Assign income test based on single/couple\r\n    if (Partnered == TRUE){\r\n      IWTC_IncomeThreshold <- Parameters$FamilyAssistance_IWTC_IncomeThreshold_Couple/52.2\r\n    } else {\r\n      IWTC_IncomeThreshold <- Parameters$FamilyAssistance_IWTC_IncomeThreshold_Single/52.2\r\n    }\r\n    \r\n    # Eligible if have children and wage exceeds the threshold\r\n    X[, IWTC_eligible := 1L * (N_kids > 0L) * ((gross_wage1 + gross_wage2) >=\r\n                                                 IWTC_IncomeThreshold)]\r\n    \r\n    # Calculate unabated IWTC\r\n    X[, IWTC_unabated := IWTC_eligible * (IWTC_first3 + max(0L, N_kids - 3L) *\r\n                                            IWTC_subsequent)]\r\n    \r\n    # Parameters$FamilyAssistance_IWTC_ToBeneficiaries determines if beneficiaries are eligible for IWTC\r\n    # 0 : Not eligible\r\n    # 1 : Eligible\r\n    if (Parameters$FamilyAssistance_IWTC_ToBeneficiaries == 0){\r\n      # If IWTC eligible, zero out benefit\r\n      X[IWTC_unabated>0, \r\n        `:=`(net_benefit1 = 0,  net_benefit2 = 0)]\r\n    }\r\n    \r\n    # tidy up\r\n    X[, IWTC_eligible := NULL]\r\n    \r\n  } else if (Parameters$FamilyAssistance_IWTC_Eligibility == 2){\r\n    # Use phase-in method \r\n    \r\n    # Phase in scale\r\n    if (Partnered == TRUE){\r\n      IWTC_PhaseInScale_Weekly <- IWTC_PhaseInScale_Couple_Weekly\r\n    } else {\r\n      IWTC_PhaseInScale_Weekly <- IWTC_PhaseInScale_Single_Weekly\r\n    }\r\n    # Maximum amount\r\n    IWTC_max <- IWTC_first3 + max(0L, N_kids - 3L) * IWTC_subsequent\r\n    \r\n    # Calcuated phased-in/unabated amount\r\n    X[, IWTC_unabated := (N_kids > 0L)*\r\n        pmin(IWTC_max,\r\n             Abate(TRUE, 0, IWTC_PhaseInScale_Weekly, gross_wage1+gross_wage2))]\r\n  } else {\r\n    # Hours test and do not give to beneficiaries\r\n    \r\n    # Hours threshold\r\n    if (Partnered == TRUE){ \r\n      FullTimeWorkingHours <- Parameters$FamilyAssistance_FullTimeWorkingHours_Couple\r\n      \r\n    } else {\r\n      FullTimeWorkingHours <- Parameters$FamilyAssistance_FullTimeWorkingHours_Single\r\n    }\r\n    \r\n    X[, IWTC_eligible := 1L * (N_kids > 0L) * ((hours1 + hours2) >= FullTimeWorkingHours)]\r\n    \r\n    # Calculate unabated IWTC\r\n    X[, IWTC_unabated := IWTC_eligible * (IWTC_first3 + max(0L, N_kids - 3L) *\r\n                                            IWTC_subsequent)]\r\n    \r\n    # If receiving IWTC, zero out benefit\r\n    X[IWTC_unabated >0, \r\n      `:=`(net_benefit1 = 0, net_benefit2 = 0)]\r\n    \r\n    # tidy up\r\n    X[, IWTC_eligible := NULL]\r\n  }\r\n  \r\n  # Back out Gross benefit\r\n  X[, gross_benefit1 := Gross_From_Net(net_benefit1, NIT, Tax_BaseScale_Weekly)]\r\n  X[, gross_benefit1 := Gross_From_Net(net_benefit1, NIT, Tax_BaseScale_Weekly)]\r\n\r\n  \r\n  if (Partnered){\r\n    X[, gross_benefit2 := Gross_From_Net(net_benefit2, NIT, Tax_BaseScale_Weekly)]\r\n  }\r\n  \r\n  # Add wage on to benefit and tax\r\n  X[, gross_benefit_and_wage1 := gross_benefit1 + gross_wage1]\r\n  X[, net_benefit_and_wage1 := Net_From_Gross(gross_benefit_and_wage1, Tax_BaseScale_Weekly)]\r\n  X[, wage1_tax := (gross_benefit_and_wage1 - net_benefit_and_wage1) - \r\n      (gross_benefit1 - net_benefit1)]\r\n  \r\n  if (Partnered) {\r\n    X[, gross_benefit_and_wage2 := gross_benefit2 + gross_wage2]\r\n    X[, net_benefit_and_wage2 := Net_From_Gross(gross_benefit_and_wage2, Tax_BaseScale_Weekly)]\r\n    X[, wage2_tax := (gross_benefit_and_wage2 - net_benefit_and_wage2) - (gross_benefit2 - net_benefit2)]\r\n  }\r\n  \r\n  # Work out ACC levy\r\n  X[, wage1_ACC_levy := pmin(gross_wage1,ACC_max_Weekly)*Parameters$ACC_LevyRate]\r\n  \r\n  if (Partnered){\r\n    X[, wage2_ACC_levy := pmin(gross_wage2,ACC_max_Weekly)*Parameters$ACC_LevyRate]\r\n  }\r\n  \r\n  # Form net wage\r\n  X[, net_wage1 := gross_wage1 - wage1_tax - wage1_ACC_levy]\r\n  \r\n  if (Partnered){\r\n    X[, net_wage2 := gross_wage2 - wage2_tax - wage2_ACC_levy]\r\n  }\r\n  \r\n  # Form unabated FTC\r\n  X[, FTC_unabated := (N_kids>0L)*FTC_eldest+max(N_kids-1L,0L)*FTC_subsequent]\r\n  \r\n  \r\n  \r\n  # Hours test for MFTC ------------\r\n  \r\n  # Hours threshold\r\n  if (Partnered == TRUE){ \r\n    FullTimeWorkingHours <- Parameters$FamilyAssistance_FullTimeWorkingHours_Couple\r\n    \r\n  } else {\r\n    FullTimeWorkingHours <- Parameters$FamilyAssistance_FullTimeWorkingHours_Single\r\n  }\r\n  \r\n  \r\n  X[, MFTC_eligible :=  (N_kids > 0L) &\r\n      ((hours1 + hours2) >= FullTimeWorkingHours) &\r\n      ((net_benefit1 + net_benefit2) == 0)]\r\n  \r\n  \r\n  # Work out MFTC amount (if benefit == 0)\r\n  X[, MFTC := MFTC_eligible *\r\n      (pmax(MFTC_amount - (gross_wage1 + gross_wage2 - wage1_tax - wage2_tax),0))]\r\n  \r\n  \r\n  # tidy up\r\n  X[, MFTC_eligible := NULL]\r\n  \r\n  \r\n  # Abate FTC and IWTC ------------\r\n  X[, AbateAmount :=\r\n      Apply(gross_wage1 + gross_wage2 + gross_benefit1 + gross_benefit2,\r\n            FamilyAssistance_Abatement_AbatementScale_Weekly)]\r\n  \r\n  \r\n  # If FamilyAssistance_Abatement_Order has not been defined\r\n  # then define it with default value: 0\r\n  # So old parameter files should still work \r\n  if(is.null(Parameters$FamilyAssistance_Abatement_Order)){\r\n    Parameters$FamilyAssistance_Abatement_Order <- 0\r\n  }\r\n  \r\n  # Changing the order FTC and IWTC abatement ---------------------\r\n  if(Parameters$FamilyAssistance_Abatement_Order == 0){\r\n    # Abate FTC first then IWTC\r\n    X[, FTC_abated := pmax(0, FTC_unabated - AbateAmount)]\r\n    X[, RemainingAbatement := pmax(0, AbateAmount - FTC_unabated)]\r\n    X[, IWTC_abated := pmax(0, IWTC_unabated - RemainingAbatement)]\r\n  } else{\r\n    # Abate IWTC first then FTC\r\n    X[, IWTC_abated := pmax(0, IWTC_unabated - AbateAmount)]\r\n    X[, RemainingAbatement := pmax(0, AbateAmount - IWTC_unabated)]\r\n    X[, FTC_abated := pmax(0, FTC_unabated - RemainingAbatement)]\r\n  }\r\n  \r\n  # tidy up\r\n  X[, RemainingAbatement := NULL]\r\n  \r\n  # If receiving best start they shouldn’t be able to receive IETC ---------------\r\n  # Best Start ------------\r\n  X[, BestStart_Universal := BS_nonabating_kids*BS_Rate0]\r\n  X[, BestStart_Abated := Abate(TRUE, BS_abating_kids*BS_Rate1or2,\r\n                                FamilyAssistance_BestStart_Abatement_AbatementScale_Weekly,\r\n                                gross_wage1+gross_wage2+gross_benefit1+gross_benefit2)]\r\n  X[, BestStart_Total := BestStart_Universal + BestStart_Abated]\r\n  \r\n  \r\n  # Work out IETC -----------\r\n  X[, IETC_eligible1 := (net_benefit1 == 0) & (FTC_abated == 0) &\r\n      (IWTC_abated == 0) & (MFTC == 0) & (BestStart_Total == 0) &\r\n      (gross_wage1 >= IETC_minimum_income)]\r\n  \r\n  X[IETC_eligible1 == TRUE, \r\n    IETC_abated1 := Abate(TRUE, IETC_rate, IETC_AbatementScale_Weekly, \r\n                          gross_wage1)]\r\n  \r\n  \r\n  X[, IETC_eligible2 := (net_benefit2 == 0) & (FTC_abated == 0) & \r\n      (IWTC_abated == 0) & (MFTC == 0) & (BestStart_Total == 0) & \r\n      (gross_wage2 >= IETC_minimum_income)]\r\n  \r\n  \r\n  X[IETC_eligible2 == TRUE, \r\n    IETC_abated2 := Abate(TRUE, IETC_rate, IETC_AbatementScale_Weekly, gross_wage2)]\r\n   \r\n  \r\n  X[Parameters$IETC_OnlyFamiliesWithoutChildren == TRUE & N_kids > 0L, \r\n    ':=' (IETC_abated1 = 0,\r\n          IETC_abated2 = 0)]\r\n  \r\n  # tidy up\r\n  X[, IETC_eligible1 := NULL]\r\n  X[, IETC_eligible2 := NULL]\r\n  \r\n  \r\n  \r\n  \r\n  # Winter Energy --------\r\n  X[, WE_Couple_or_Deps := 0]\r\n  X[, WE_Single := 0]\r\n  \r\n  X[, WE_eligible := (net_benefit1 + net_benefit2) > 0]\r\n  \r\n  X[, WE_Couple_or_Deps_eligible := WE_eligible == TRUE & \r\n      (N_kids > 0L | Partnered)]\r\n\r\n  X[WE_Couple_or_Deps_eligible == TRUE,\r\n    WE_Couple_or_Deps := WE_Couple_or_Deps_amount]\r\n\r\n  X[, WE_Single_eligible :=  WE_eligible == TRUE & \r\n      ((!Partnered) & N_kids == 0L)]\r\n\r\n  X[WE_eligible == TRUE & WE_Single_eligible == TRUE,\r\n    WE_Single := WE_Single_amount]\r\n  \r\n  X[, WinterEnergy := WE_Couple_or_Deps +  WE_Single]\r\n\r\n  # tidy up\r\n  X[, WE_eligible := NULL]\r\n  X[, WE_Couple_or_Deps := NULL]\r\n  X[, WE_Couple_or_Deps_eligible := NULL]\r\n  X[, WE_Single := NULL]\r\n  X[, WE_Single_eligible := NULL]\r\n  \r\n  # Accommodation Supplement -----------\r\n  X[, AS_Amount := pmax(\r\n    pmin(Parameters$Accommodation_PaymentPercentage * (AS_Accommodation_Costs - AS_entry_threshold),\r\n         AS_Maximum) -\r\n      pmax(gross_wage1 + gross_wage2 - AS_Abate_Point, 0) * \r\n      Parameters$Accommodation_AbatementRate * ((net_benefit1 + net_benefit2) == 0), 0)]\r\n  \r\n  # Net income and EMTR\r\n  X[, Net_Income := net_benefit1 + net_wage1 + net_benefit2 + net_wage2 +\r\n      IETC_abated1 + IETC_abated2 + FTC_abated + IWTC_abated + MFTC +  \r\n      WinterEnergy + BestStart_Total + AS_Amount]\r\n  \r\n  X[, EMTR := 1 - steps_per_dollar*(shift(Net_Income,1L,type=\"lead\")-Net_Income)]\r\n  X[, EMTR := zoo::na.locf(EMTR)]\r\n  \r\n  # Replacement rate\r\n  X[, Replacement_Rate := first(Net_Income) / Net_Income]\r\n  X[, Participation_Tax_Rate := 1 - (Net_Income - first(Net_Income))/(gross_wage1 + gross_wage2)]\r\n  \r\n  # As in TAWA proc the disposable income is calculated as: \r\n  # P_Income_Total + P_FamilyAssistance_Total + P_TaxCredit_IETC - P_Income_TaxPayable - P_ACC_LevyPayable\r\n  # Same definition as \"Net_Income\", so use \"Net_Income\" as disposable income.\r\n  \r\n  # Number of children under 14\r\n  LT_14 <- sum(Children_ages < 14)\r\n  \r\n  # Number of children over 14\r\n  GTE_14 <- sum( Children_ages >= 14) + ifelse(Partnered == FALSE, 1, 2)\r\n  \r\n  # Modified OECD\r\n  moecd_eq_factor <- 1 + 0.5 * (GTE_14 - 1) + 0.3 * (LT_14)\r\n  \r\n  # Equivalised Income\r\n  X[, Equivalised_Income := Net_Income / moecd_eq_factor]\r\n\r\n  # BHC Depth\r\n  X[, BHC_Depth := (moecd_eq_factor * (pov_thresholds*bhc_median - pmax(0, Equivalised_Income*weeks_in_year)))/weeks_in_year]\r\n \r\n  # After housing cost disposable income\r\n  X[, AHC_Net_Income := Net_Income - AS_Accommodation_Costs]\r\n  \r\n  # Equivalised Income\r\n  X[, AHC_Equivalised_Income := AHC_Net_Income / moecd_eq_factor]\r\n  \r\n  # AHC Depth\r\n  X[, AHC_Depth := (moecd_eq_factor * (pov_thresholds*ahc_median - pmax(0, AHC_Equivalised_Income*weeks_in_year)))/weeks_in_year]\r\n  \r\n  # Unequivalised median\r\n  X[, \":=\" (BHC_Unequiv_Poverty_Line = pov_thresholds * moecd_eq_factor * bhc_median,\r\n            AHC_Unequiv_Poverty_Line = pov_thresholds * moecd_eq_factor * ahc_median,\r\n            Eq_Factor = moecd_eq_factor)]\r\n  \r\n  return(X)\r\n}\r\n\r\n\r\n","type":"text"},{"name":"R/estimate_MFTC_rates.R","content":"##### Find Net income crossing for staying on benefit vs getting IWTC ####\n## Then MFTC is the gross_wage - wage_tax + net_income_diff amount\n## at the point just before the crossing.\n\nfind_MFTC <- function(\n  emtr_on_ben,\n  emtr_working,\n  min_wage,\n  ben_hours_test\n) {\n  wage_threshold <- min_wage*ben_hours_test\n  start_index <- emtr_on_ben[gross_wage1 < wage_threshold, .N]\n  \n  # Check if there is a crossing\n  net_income_diff <-\n    emtr_on_ben[gross_wage1 >= wage_threshold, Net_Income] -\n      emtr_working[gross_wage1 >= wage_threshold, Net_Income]\n  MFTC_required <- any(net_income_diff > 0) & any(net_income_diff < 0)\n  \n  if (!MFTC_required) {\n    print(\"MFTC not required\")\n    proposed_MFTC <- NA\n  } else {\n    relative_crossing_index <- which(net_income_diff < 0)[1] - 1\n    crossing_index <- start_index + relative_crossing_index\n    \n    boost <- net_income_diff[relative_crossing_index]\n    \n    proposed_MFTC_weekly <- emtr_working[\n      crossing_index, gross_wage1 - wage1_tax + gross_wage2 - wage2_tax + boost\n    ]\n    proposed_MFTC <- ceiling(proposed_MFTC_weekly)*52L\n    if (is.na(proposed_MFTC)) {\n      stop(\"MFTC estimated to be NA but there should have been a zero crossing\")\n    }\n  }\n  return(proposed_MFTC)\n}\n\n#' Estimate MFTC rates for a given parameter file\n#'\n#' @param parameter_file Parameter file (*.xlsx) in the IncomeExplorer format\n#'                       supported by the `emtr` function\n#' @param min_wage Minimum wage\n#' @param steps_per_dollar Number of steps to calculate, per dollar of gross earned income\n#' @param WEP_scaling Scaling of the annual Winter Energy amount.\n#'                    Prior to Budget 2021, was 12/5 (annualised winter week).\n#'                    Since Budget 2021, defaults to 1 (average over year).\n#'\n#' @return\n#' @export\n#'\n#' @examples\nestimate_MFTC_rates <- function(\n  parameter_file,\n  min_wage,\n  steps_per_dollar = 1L,\n  WEP_scaling = 1\n) {\n  parameters <- parameters_from_file(parameter_file)\n\n  # Parameters for family working and not on benefit (IWTC not turned off)\n  parameters_NoMFTC <- copy(parameters)\n  parameters_NoMFTC$FamilyAssistance_MFTC_Rates_MinimumIncome <- 0\n  \n  # Parameters for family on Benefit and working (IWTC turned off)\n  parameters_NoMFTC_NoIWTC <- copy(parameters_NoMFTC)\n  parameters_NoMFTC_NoIWTC$FamilyAssistance_IWTC_Rates_UpTo3Children <- 0\n  parameters_NoMFTC_NoIWTC$FamilyAssistance_IWTC_Rates_SubsequentChildren <- 0\n  \n  ##### Family 1 - JSS couple, 50/50 income split\n  MFTC_Couple_5050_working <- emtr(\n    parameters_NoMFTC,\n    Partnered = T,\n    wage1_hourly = min_wage,\n    Children_ages = c(10),\n    gross_wage2 = min_wage*15,\n    hours2 = 15,\n    AS_Accommodation_Costs = 0,\n    AS_Accommodation_Rent = T,\n    AS_Area = 1L,\n    max_wage = min_wage*50,\n    steps_per_dollar = steps_per_dollar,\n    weeks_in_year = 52L,\n    MFTC_WEP_scaling = WEP_scaling\n  )\n  \n  MFTC_Couple_5050_benefit <- emtr(\n    parameters_NoMFTC_NoIWTC,\n    Partnered = T,\n    wage1_hourly = min_wage,\n    Children_ages = c(10),\n    gross_wage2 = min_wage*15,\n    hours2 = 15,\n    AS_Accommodation_Costs = 0,\n    AS_Accommodation_Rent = T,\n    AS_Area = 1L,\n    max_wage = min_wage*50,\n    steps_per_dollar = steps_per_dollar,\n    weeks_in_year = 52L,\n    MFTC_WEP_scaling = WEP_scaling\n  )\n  \n  # Family 2 - SPS sole parent\n  MFTC_SoleParent_working <- emtr(\n    parameters_NoMFTC,\n    Partnered = F,\n    wage1_hourly = min_wage,\n    Children_ages = c(10),\n    gross_wage2 = 0,\n    hours2 = 0,\n    AS_Accommodation_Costs = 0,\n    AS_Accommodation_Rent = T,\n    AS_Area = 1L,\n    max_wage = min_wage*50,\n    steps_per_dollar = steps_per_dollar,\n    weeks_in_year = 52L,\n    MFTC_WEP_scaling = WEP_scaling\n  )\n  \n  MFTC_SoleParent_benefit <- emtr(\n    parameters_NoMFTC_NoIWTC,\n    Partnered = F,\n    wage1_hourly = min_wage,\n    Children_ages = c(10),\n    gross_wage2 = 0,\n    hours2 = 0,\n    AS_Accommodation_Costs = 0,\n    AS_Accommodation_Rent = T,\n    AS_Area = 1L,\n    max_wage = min_wage*50,\n    steps_per_dollar = steps_per_dollar,\n    weeks_in_year = 52L,\n    MFTC_WEP_scaling = WEP_scaling\n  )\n  \n  ##### Find Net income crossing for staying on benefit vs getting IWTC ####\n  ## Then MFTC is the gross_wage - wage_tax amount at the crossing.\n  proposed_MFTC_SoleParent <- find_MFTC(\n    MFTC_SoleParent_benefit,\n    MFTC_SoleParent_working,\n    min_wage = min_wage,\n    ben_hours_test = 20\n  )\n  \n  proposed_MFTC_Couple_5050 <- find_MFTC(\n    MFTC_Couple_5050_benefit,\n    MFTC_Couple_5050_working,\n    min_wage = min_wage,\n    ben_hours_test = 15\n  )\n  \n  out <- data.table(\n    File = basename(parameter_file),\n    Family = c(\"Couple_50-50\", \"SoleParent\"),\n    MFTC_minincome = c(proposed_MFTC_Couple_5050, proposed_MFTC_SoleParent)\n  )\n  return(out)\n}\n","type":"text"},{"name":"R/estimate_parameter_files.R","content":"DEFAULT_MIN_WAGES <- c(\r\n  \"2014\" = 13.75,\r\n  \"2015\" = 14.25,\r\n  \"2016\" = 14.75,\r\n  \"2017\" = 15.25,\r\n  \"2018\" = 15.75,\r\n  \"2019\" = 16.50,\r\n  \"2020\" = 17.70,\r\n  \"2021\" = 18.90,\r\n  \"2022\" = 20.00,\r\n  \"2023\" = 21.20,\r\n  \"2024\" = 22.70,\r\n  # Assumes the minimum wage is unchanged for future tax years\r\n  \"2025\" = 22.70,\r\n  \"2026\" = 22.70,\r\n  \"2027\" = 22.70\r\n)\r\n\r\nestimate_MFTC_from_files <- function(\r\n  parameter_files,\r\n  min_wages = DEFAULT_MIN_WAGES,\r\n  WEP_scaling = 1\r\n) {\r\n  estimated_MFTC_rates <- data.table()\r\n  for (parameter_file in parameter_files){\r\n    tax_year <- parameter_file %>% basename() %>%\r\n      stringr::str_extract(\"TY[0-9]{2}\") %>%\r\n      stringr::str_remove(\"TY\") %>% as.numeric()\r\n    tax_year <- tax_year + 2000\r\n    if (tax_year > 2023) {\r\n      logging::logwarn(\r\n        \"Minimum wage for tax year %d is not legislated yet, subject to change\",\r\n        tax_year\r\n      )\r\n    }\r\n    if (tax_year %in% names(min_wages)) {\r\n      min_wage <- min_wages[[as.character(tax_year)]]\r\n    } else {\r\n      stop(\"Minimum wage not defined for tax year \", tax_year)\r\n    }\r\n    this_MFTC_rates <- estimate_MFTC_rates(\r\n      parameter_file,\r\n      min_wage = min_wage,\r\n      steps_per_dollar = 52L,\r\n      WEP_scaling = WEP_scaling\r\n    )\r\n    \r\n    estimated_MFTC_rates <- rbind(estimated_MFTC_rates, this_MFTC_rates, fill = TRUE)\r\n  }\r\n  \r\n  estimated_MFTC_rates[, max_MFTC := max(MFTC_minincome), by = File]\r\n  return(estimated_MFTC_rates)\r\n}","type":"text"},{"name":"R/hard_load.R","content":"get_parameters = function() {\r\n  params = list(modelyear = 2024, ACC_LevyRate = 0.0153, ACC_MaxLeviableIncome = 139384, \r\n                Accommodation_AbatementRate = 0.25, Accommodation_BaseRateThreshold_Mortgage = 0.3, \r\n                Accommodation_BaseRateThreshold_Rent = 0.25, Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area1 = 0, \r\n                Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area2 = 0, \r\n                Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area3 = 0, \r\n                Accommodation_MaxRate_CoupleDeps_Single2_Deps_Area4 = 0, \r\n                Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area1 = 0, \r\n                Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area2 = 0, \r\n                Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area3 = 0, \r\n                Accommodation_MaxRate_CoupleNoDeps_Single1Dep_Area4 = 0, \r\n                Accommodation_MaxRate_SingleNoDeps_Area1 = 165, Accommodation_MaxRate_SingleNoDeps_Area2 = 105, \r\n                Accommodation_MaxRate_SingleNoDeps_Area3 = 80, Accommodation_MaxRate_SingleNoDeps_Area4 = 70, \r\n                Accommodation_PaymentPercentage = 0.7, Benefits_JSS_AbatementScale = structure(c(0, \r\n                                                                                                 8352, 0, 0.7), dim = c(2L, 2L)), Benefits_JSS_CoupleAbatementScale = structure(c(0, \r\n                                                                                                                                                                                  8352, 0, 0.35), dim = c(2L, 2L)), Benefits_JSS_Rate_Couple = 287.35, \r\n                Benefits_JSS_Rate_CoupleParent = 303.43, Benefits_JSS_Rate_Single = 337.74, \r\n                Benefits_JSS_Rate_SoleParent = 472.79, Benefits_SPS_AbatementScale = structure(c(0, \r\n                                                                                                 8352, 13050, 0, 0.3, 0.7), dim = 3:2), Benefits_SPS_Rate = 472.79, \r\n                Benefits_Entitlement_Age_SPS_ChildLowerBound = 14, Benefits_WinterEnergy_Rates_Single = 450, \r\n                Benefits_WinterEnergy_Rates_CoupleOrDeps = 700, Benefits_LivingAlonePayment_Single = 0, \r\n                Benefits_LivingAlonePayment_SoleParent = 0, FamilyAssistance_Abatement_AbatementScale = structure(c(0, \r\n                                                                                                                    42700, 0, 0.27), dim = c(2L, 2L)), FamilyAssistance_Abatement_Order = 0, \r\n                FamilyAssistance_FTC_Rates_FirstChild = 7121, FamilyAssistance_FTC_Rates_SubsequentChild = 5802, \r\n                FamilyAssistance_IWTC_Rates_UpTo3Children = 3770, FamilyAssistance_IWTC_Rates_SubsequentChildren = 780, \r\n                FamilyAssistance_IWTC_Eligibility = 1, FamilyAssistance_FullTimeWorkingHours_Couple = 30, \r\n                FamilyAssistance_FullTimeWorkingHours_Single = 20, FamilyAssistance_IWTC_IncomeThreshold_Single = 1184.94, \r\n                FamilyAssistance_IWTC_IncomeThreshold_Couple = 1184.94, FamilyAssistance_IWTC_ToBeneficiaries = 0, \r\n                FamilyAssistance_IWTC_PhaseIn_Single = structure(c(0, 0), dim = 1:2), \r\n                FamilyAssistance_IWTC_PhaseIn_Couple = structure(c(0, 0), dim = 1:2), \r\n                FamilyAssistance_MFTC_Rates_MinimumIncome = 34216, FamilyAssistance_BestStart_Abatement_AbatementScale = structure(c(0, \r\n                                                                                                                                     79000, 0, 0.21), dim = c(2L, 2L)), FamilyAssistance_BestStart_Rates_Age0 = 3632, \r\n                FamilyAssistance_BestStart_Rates_Age1or2 = 3632, IETC_AbatementScale = structure(c(0, \r\n                                                                                                   44000, 0, 0.13), dim = c(2L, 2L)), IETC_MinimalIncome = 24000, \r\n                IETC_PerYear = 520, IETC_OnlyFamiliesWithoutChildren = 0, \r\n                EITC_ApplyEITC = 0, EITC_AbatementScale = structure(c(0, \r\n                                                                      0, 0, 0), dim = c(2L, 2L)), EITC_ExcludeFamiliesWithoutChildren = 0, \r\n                Tax_BaseScale = structure(c(0, 14000, 48000, 70000, 180000, \r\n                                            0.105, 0.175, 0.3, 0.33, 0.39), dim = c(5L, 2L)))\r\n  return(params)\r\n}","type":"text"},{"name":"R/reformat_parameters.R","content":"# Convert TAWA parameter files to IncomeExplorer app parameter files\nTAWA_to_app_param_files <- function(\n  input_param_paths, output_param_dir, output_suffix,\n  output_template_path = \"App_Parameters_Template.xlsx\") {\n  \n  # Rename\n  new_names <- data.table(\n    Parameter = c(\n      \"FamilyAssistance/FTC/Rates/FirstChild0to15\",\n      \"FamilyAssistance/FTC/Rates/SecondChild0to12\",\n      \"FamilyAssistance/IWTC/IncomeTest\",\n      \"FamilyAssistance/IWTC/IncomeThreshold\",\n      \"FamilyAssistance/IWTC/IncomeThreshold\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2+Deps/Area1\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2+Deps/Area2\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2+Deps/Area3\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2+Deps/Area4\"\n    ),\n    New_Parameter = c(\n      \"FamilyAssistance/FTC/Rates/FirstChild\",\n      \"FamilyAssistance/FTC/Rates/SubsequentChild\",\n      \"FamilyAssistance/IWTC/Eligibility\",\n      \"FamilyAssistance/IWTC/IncomeThreshold/Couple\",\n      \"FamilyAssistance/IWTC/IncomeThreshold/Single\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2_Deps/Area1\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2_Deps/Area2\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2_Deps/Area3\",\n      \"Accommodation/MaxRate/CoupleDeps_Single2_Deps/Area4\"\n    )\n  ) \n  # template\n  wb_template <- openxlsx::loadWorkbook(output_template_path)\n  parameters <- openxlsx::readWorkbook(wb_template) %>% setDT()\n  parameters <- parameters[, .(Parameter,Value, .I)]\n  \n  for (old_file in input_param_paths) {\n    # old file\n    old_parameters <- openxlsx::readWorkbook(old_file) %>% setDT()\n    setnames(old_parameters, c(\"Parameter\", \"Value\"))\n    \n    old_parameters <- merge(old_parameters, new_names, by = \"Parameter\", all = TRUE)\n    changed_parameters <- old_parameters[\n      New_Parameter != Parameter, .(old = Parameter, new = New_Parameter)\n    ]\n    \n    old_parameters[is.na(New_Parameter), New_Parameter := Parameter]\n    old_parameters <- old_parameters[, .(Parameter = New_Parameter, Value)]\n    \n    # merge existing values with template structure\n    new_parameters <- merge(\n      parameters, old_parameters,\n      by = \"Parameter\", all = TRUE\n    )\n    new_parameters[, Value := Value.y]\n    new_parameters[is.na(Value.y), Value := Value.x]\n    \n    logging::loginfo(paste0(\"Reformatting file: \", old_file))\n    logging::loginfo(paste0(\"Dropped Parameters: \", new_parameters[is.na(Value.x), Parameter]))\n    logging::loginfo(paste0(\"New Parameters: \", new_parameters[is.na(Value.y), Parameter]))\n    logging::loginfo(paste0(\"Renamed Parameters: \", changed_parameters[, new]))\n    \n    # save new parameters\n    new_parameters <- new_parameters[!is.na(Value.x)]\n    openxlsx::writeData(\n      wb_template, 1,\n      new_parameters[order(I), .(Parameter, Value)],\n      startRow = 2, startCol = 2\n    )\n    output_path <- file.path(output_param_dir, paste0(output_suffix, basename(old_file)))\n    openxlsx::saveWorkbook(wb_template, output_path, overwrite = TRUE)\n  }\n}\n","type":"text"},{"name":"R/split_TAWA_parameters.R","content":"################################################################################\n# Generates TAWA parameter files from given parameters, inflators, and mapping files.\n# All HES years and tax years share the same inflator and mapping file,\n# with parameters being specific to each tax year,\n# and the baseyear parameter set equal to the HES year.\n# The parameters for all tax years are taken to be columns in the parameters file.\n################################################################################\n\nsplit_TAWA_parameters <- function(params_path, output_suffix, output_dir) {\n  all_params <- openxlsx::read.xlsx(params_path) %>% setDT()\n  \n  # Don't hard-code these parameters\n  all_params <- all_params[!(Parameter %in% c(\"Database_File\", \"baseyear\", \"Out_File\"))]\n  \n  # Extract tax years from the parameters file\n  tax_years <- all_params[Parameter == \"modelyear\", .SD, .SDcols = !\"Parameter\"] %>%\n    unlist() %>% as.numeric()\n  tax_years <- tax_years - 2000\n  \n  STYLE_FONT <- openxlsx::createStyle(fontName = \"Segoe UI\", fontSize = 10)\n  STYLE_BOLD <- openxlsx::createStyle(textDecoration = \"bold\")\n  STYLE_BORDER_BOTTOM <- openxlsx::createStyle(border = \"bottom\")\n  STYLE_HIGHLIGHTED <- openxlsx::createStyle(fgFill = \"#FFFF00\")\n  \n  rows_with_bottom_border <- c(2, 5, 7, 28, 30, 50, 69, 72, 78, 79, 88, 96, 97)\n  \n  for(tax_year in tax_years) {\n    logging::loginfo(\"TY%d\", tax_year)\n    \n    this_TY_col <- names(all_params) %>% .[. %like% paste0(\"TY\", tax_year)]\n    params <- all_params[, .SD, .SDcols = c(\"Parameter\", this_TY_col)]\n    this_params_col <- paste0(\"SQ_TY\", tax_year, output_suffix)\n    setnames(params, this_TY_col, this_params_col)\n    \n    # Cast character data to numeric,\n    # and shuffle the column names around while saving the character data\n    # to fill in the numeric NAs manually later\n    params[, numeric_data := lapply(.SD, function(.) {\n      suppressWarnings(as.numeric(.))\n    }), .SDcols = this_params_col]\n    \n    setnames(params, c(this_params_col, \"numeric_data\"), c(\"character_data\", this_params_col))\n    setcolorder(params, c(\"Parameter\", this_params_col, \"character_data\"))\n    \n    # Create xlsx file with required sheets\n    wb <- openxlsx::createWorkbook()\n    openxlsx::addWorksheet(wb, \"Parameters\")\n    \n    # Parameter Data\n    openxlsx::writeData(\n      wb, \"Parameters\",\n      x = params[, .SD, .SDcols = c(\"Parameter\", this_params_col)],\n      startRow = 2, startCol = 2, colNames = TRUE\n    )\n    \n    # Replace individual cells having NA numerical data with character data\n    na_rows <- which(is.na(params[, .SD, .SDcols = this_params_col]))\n    for (na_row in na_rows) {\n      openxlsx::writeData(\n        wb, \"Parameters\",\n        x = params[na_row, character_data],\n        startRow = 2 + na_row, startCol = 3\n      )\n    }\n    \n    # Style Parameters sheet\n    openxlsx::showGridLines(wb, \"Parameters\", showGridLines = FALSE)\n    openxlsx::setRowHeights(wb, \"Parameters\", rows = 1 + 1:nrow(params), heights = 16)\n    openxlsx::setColWidths(wb, \"Parameters\", cols = 2:3, widths = c(60.55, 22.55))\n    \n    openxlsx::addStyle(\n      wb, \"Parameters\", STYLE_BOLD,\n      rows = 2:5, cols = 2:3, gridExpand = TRUE, stack = TRUE\n    )\n    openxlsx::addStyle(\n      wb, \"Parameters\", STYLE_FONT,\n      rows = 1 + 1:nrow(params), cols = 2:3, gridExpand = TRUE, stack = TRUE\n    )\n    openxlsx::addStyle(\n      wb, \"Parameters\", STYLE_BORDER_BOTTOM,\n      rows = rows_with_bottom_border, cols = 2:3, gridExpand = TRUE, stack = TRUE\n    )\n    openxlsx::addStyle(\n      wb, \"Parameters\", STYLE_HIGHLIGHTED,\n      rows = 89:97, cols = 2:3, gridExpand = TRUE, stack = TRUE\n    )\n    \n    this_filename <- file.path(\n      output_dir, sprintf(\"TY%d%s.xlsx\", tax_year, output_suffix)\n    )\n    openxlsx::saveWorkbook(wb, this_filename, overwrite = TRUE)\n  }\n}","type":"text"},{"name":"R/util.R","content":"# Helper functions for EMTR function\n\n#' @title Abatement\n#' @author Christopher Ball, \\email{Christopher.Ball@@treasury.govt.nz}\n#'\n#' @description Works out the abatement on a given amount under a given abatement regime\n#' against a certain income.  Can be applied only to certain sample elements using\n#' the Cond argument, and is fully vectorised by design.\n#'\n#' @param Cond Boolean vector of which elements are abated.  Can use\n#' \\code{T} to apply to all elements.\n#' @param Amount The amount which is abated.\n#' @param Scale An abatement scale (set of rates and thresholds) which is applied to\n#' the amount.\n#' @param Income An income measure used for determining abatement\n#' @return Vector of abated incomes.  Assumes that abated amount is non-negative.\n#' @family Utilities\n#' @export\nAbate <- function(Cond, Amount, Scale, Income){\n  Scale_Rows <- nrow(Scale)\n  for (Row in 2:Scale_Rows){\n    Amount <- Amount - Cond * pmax(0, pmin(Scale[Row, 1], Income) - Scale[Row - 1, 1]) * Scale[Row - 1, 2]\n  }\n  Amount <- Amount - Cond * pmax(0, Income - Scale[Scale_Rows, 1]) * Scale[Scale_Rows, 2]\n  return(pmax(0, Amount))\n}\nattr(Abate, \"utility\") <- T\n\n#' @title Abatement Vanishing Point\n#' @author Christopher Ball, \\email{Christopher.Ball@@treasury.govt.nz}\n#'\n#' @description Works out the minimum income amount under a given scale at which\n#' the abated amount is $0.  Assumes that such a point exists.  Not vectorised,\n#' but it doesn't in general need to be as a vector can be made through recycling.\n#'\n#' @inheritParams Abate\n#' @return Abatement vanishing point.\n#' @family Utilities\n#' @export\nAbatement_Vanishing_Point <- function(Scale, Amount){\n  # Not vectorised - but it doesn't need to be!\n  n <- nrow(Scale)\n  for (Th in 1:(n-1)){\n    if (Scale[Th, 2] == 0) next\n    if (Scale[Th, 1] + Amount/Scale[Th, 2] > Scale[Th + 1, 1]){\n      Amount = Amount - Scale[Th, 2]*(Scale[Th + 1, 1] - Scale[Th, 1])\n    } else {\n      return(Scale[Th, 1] + Amount/Scale[Th, 2])\n    }\n  }\n  return(Scale[n, 1] + Amount/Scale[n, 2])\n}\nattr(Abatement_Vanishing_Point, \"utility\") <- T\n\n#' @title Applies a given tax system to an income amount.\n#' @author Christopher Ball, \\email{Christopher.Ball@@treasury.govt.nz}\n#'\n#' @description This function calculates the tax amount due given the pre-tax\n#' amount and the relevant tax scale.  Vectorised for efficiency.\n#'\n#' @inheritParams Gross_From_Net\n#' @return Vector of tax amounts.\n#' @family Utilities\n#' @export\nApply <- function(Amount, Tax_Scale){\n  Tax <- 0\n  n <- nrow(Tax_Scale)\n  for (Th in 1:(n-1)){\n    Tax <- Tax + (pmin(pmax(Amount, Tax_Scale[Th, 1]), Tax_Scale[Th + 1, 1]) - Tax_Scale[Th, 1])*Tax_Scale[Th, 2]\n  }\n  return(Tax + pmax(0, Amount - Tax_Scale[n, 1])*Tax_Scale[n, 2])\n}\nattr(Apply, \"utility\") <- T\n\n\n\nGross_From_Net <- function(Amount, Net_Thresholds, Tax_Scale){\n  Levels <- length(Net_Thresholds)\n  Old <- 0\n  Gross <- 0*Amount\n  for (Th in 2:Levels){\n    Gross <- Gross + (Amount < Net_Thresholds[Th] & Amount >= Net_Thresholds[Th - 1])*\n      (Tax_Scale[Th-1, 1] + (Amount - Old) / (1 - Tax_Scale[Th - 1, 2]))\n    #print(Tax_Scale[Th-1, 1])\n    #print((Amount - Old) / (1 - Tax_Scale[Th - 1, 2]))\n    Old <- Net_Thresholds[Th]\n  }\n  return(Gross + (Amount > Net_Thresholds[Levels]) * \n           (Tax_Scale[Levels, 1] + (Amount - Old) / (1 - Tax_Scale[Levels, 2])))\n}\nattr(Gross_From_Net, \"utility\") <- T\n\n\n#' @title Calculates the net income given gross income and a tax scale.\n#' @author Christopher Ball, \\email{Christopher.Ball@@treasury.govt.nz}\n#'\n#' @description This function calculates the net of tax income given the pre-tax\n#' amount and the relevant tax scale.  Vectorised for efficiency.\n#'\n#' @inheritParams Gross_From_Net\n#' @return Vector of net of tax income amounts.\n#' @seealso Apply\n#' @family Utilities\n#' @export\nNet_From_Gross <- function(Amount, Tax_Scale){\n  return(Amount - Apply(Amount, Tax_Scale))\n}\nattr(Net_From_Gross, \"utility\") <- T\n\n\n\n\n","type":"text"},{"name":"runApp.R","content":"\r\n# Install all the required package for the EMTR function and income explorer app\r\npkg <- c(\"shiny\", \"rhandsontable\", \"RColorBrewer\", \"shinythemes\",\r\n         \"plotly\", \"openxlsx\", \"data.table\", \"ggplot2\", \r\n         \"scales\", \"magrittr\", \"zoo\")\r\n\r\nnew.pkg <- pkg[!(pkg %in% installed.packages())]\r\n\r\nif (length(new.pkg) > 0) {\r\n  install.packages(new.pkg)\r\n}\r\n\r\nif(packageVersion(\"shiny\") < \"1.5.0\"){\r\n  install.packages(\"shiny\")\r\n}\r\n\r\nshiny::runApp()\r\n\r\n","type":"text"}]
